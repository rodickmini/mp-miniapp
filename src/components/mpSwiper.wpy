<template>
  <view class="h-100 w-100 mp-swiper d-flex flex-column">
    <view class="swiper-nav w-100 d-flex">
      <slot name="prepend" class="nav-item-prepend"></slot>
      <view class="swiper-nav-content flex-fill" style="width: 0;">
        <scroll-view scroll-x scroll-into-view="{{scrollToEl}}">
          <view class="d-flex">
            <repeat for="{{navArr}}" key="index" index="index" item="item">
              <view id="{{item.elId}}" class="flex-fill text-center nav-item {{item.id === activeNavId ? 'active' : ''}}">
                <view class="d-inline-block" @tap="switchTab({{item}})">
                  <text class="d-block">{{item.name}}</text>
                  <view class='active-line'></view>
                </view>
              </view>
            </repeat>
          </view>
        </scroll-view>
      </view>
      <slot name="append" class="nav-item-apend"></slot>
    </view>
    <view class="flex-fill">
      <swiper class="swiper-container h-100" current="{{activeNavIndex}}" @change="swiperChange">
        <slot></slot>
      </swiper>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import _ from '../js/tools'

@connect({
  systemInfo(state) {
    return state.circle.systemInfo
  }
}, {

})

export default class mpSwiper extends wepy.component {
    props = {
      navArr: {
        type: Array,
        default: [{ id: 0, name: '全部' }]
      },
      maxItemCount: {
        type: Number,
        default: 5
      }
    };
    data = {
      activeNavId: 0,
      activeNavIndex: 0,
      scrollToEl: '',
      showIndexRange: [0, 4] // 可视nav的index边界，不可超出
    };
    getNavIndex(val) {
      return _.findIndex(this.navArr, { id: val.id })
    }
    getNavItem(idx) {
      if (idx < 0 ) {
        idx = 0
      }
      if (idx > this.navArr.length - 1) {
        idx = this.navArr.length - 1
      }
      return this.navArr[idx]
    }
    methods = {
      switchTab(item) {
        const index = this.getNavIndex(item)
        this.activeNavId = item.id
        this.activeNavIndex = index
      },
      swiperChange(e) {
        const idx = e.detail.current
        const item = this.getNavItem(idx)
        this.activeNavId = item.id
        if (idx > this.showIndexRange[1] - 1) {
          this.scrollToEl = this.getNavItem(idx - 1).elId
          this.showIndexRange = [idx-1, idx + this.maxItemCount - 2]
        }
        if (idx === this.showIndexRange[0]) {
          this.scrollToEl = this.getNavItem(idx - 3).elId
          this.showIndexRange = [idx-3, idx + 1]
        }
        this.$emit('change', e)
      }
    };
    onLoad() {
      this.showIndexRange[1] = this.maxItemCount - 1
    }
  }
</script>

<style lang="scss">
  @import "../style/var";
  $swiper-nav-height: 75rpx;
  .mp-swiper {
    .swiper-nav {
      white-space: nowrap;
      line-height: $swiper-nav-height;
      height: $swiper-nav-height;
      overflow: hidden;
      .nav-item {
        & + .nav-item {
          margin-left: 10rpx;
        }
        .active-line {
          display: none;
          color: $primary;
          height: 2px;
          width: 100%;
        }
        &.active {
          color: $primary;
          & .active-line {
            display: block;
            background-color: $primary;
          }
        }
      }
    }
    .swiper-container {
      width: 100%;
      box-sizing: border-box;
    }
  }
</style>
